'use strict';

/** @returns {void} */

function run(fn) {
	return fn();
}

function blank_object() {
	return Object.create(null);
}

/**
 * @param {Function[]} fns
 * @returns {void}
 */
function run_all(fns) {
	fns.forEach(run);
}

let current_component;

/** @returns {void} */
function set_current_component(component) {
	current_component = component;
}

const ATTR_REGEX = /[&"]/g;
const CONTENT_REGEX = /[&<]/g;

/**
 * Note: this method is performance sensitive and has been optimized
 * https://github.com/sveltejs/svelte/pull/5701
 * @param {unknown} value
 * @returns {string}
 */
function escape(value, is_attr = false) {
	const str = String(value);
	const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
	pattern.lastIndex = 0;
	let escaped = '';
	let last = 0;
	while (pattern.test(str)) {
		const i = pattern.lastIndex - 1;
		const ch = str[i];
		escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : ch === '"' ? '&quot;' : '&lt;');
		last = i + 1;
	}
	return escaped + str.substring(last);
}

function validate_component(component, name) {
	if (!component || !component.$$render) {
		if (name === 'svelte:component') name += ' this={...}';
		throw new Error(
			`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`
		);
	}
	return component;
}

let on_destroy;

/** @returns {{ render: (props?: {}, { $$slots, context }?: { $$slots?: {}; context?: Map<any, any>; }) => { html: any; css: { code: string; map: any; }; head: string; }; $$render: (result: any, props: any, bindings: any, slots: any, context: any) => any; }} */
function create_ssr_component(fn) {
	function $$render(result, props, bindings, slots, context) {
		const parent_component = current_component;
		const $$ = {
			on_destroy,
			context: new Map(context || (parent_component ? parent_component.$$.context : [])),
			// these will be immediately discarded
			on_mount: [],
			before_update: [],
			after_update: [],
			callbacks: blank_object()
		};
		set_current_component({ $$ });
		const html = fn(result, props, bindings, slots);
		set_current_component(parent_component);
		return html;
	}
	return {
		render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
			on_destroy = [];
			const result = { title: '', head: '', css: new Set() };
			const html = $$render(result, props, {}, $$slots, context);
			run_all(on_destroy);
			return {
				html,
				css: {
					code: Array.from(result.css)
						.map((css) => css.code)
						.join('\n'),
					map: null // TODO
				},
				head: result.title + result.head
			};
		},
		$$render
	};
}

/* tests/increment/Button.svelte generated by Svelte v4.1.1 */

const css$1 = {
	code: "button.svelte-1g2i04o{background:lawngreen;border:1px solid green;font-family:cursive, system-ui}button.svelte-1g2i04o:hover{background:green;color:lawngreen}",
	map: "{\"version\":3,\"file\":\"Button.svelte\",\"sources\":[\"Button.svelte\"],\"sourcesContent\":[\"<script>\\n\\texport let count = 0;\\n\\n\\tfunction handleClick() {\\n\\t\\tcount += 1;\\n\\t}\\n</script>\\n\\n<button on:click={handleClick}>\\n\\tClicked {count}\\n\\t{count === 1 ? 'time' : 'times'}\\n</button>\\n\\n<style>\\n  button {\\n    background: lawngreen;\\n    border: 1px solid green;\\n    font-family: cursive, system-ui;\\n  }\\n  button:hover {\\n    background: green;\\n    color: lawngreen;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAcE,qBAAO,CACL,UAAU,CAAE,SAAS,CACrB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,WAAW,CAAE,OAAO,CAAC,CAAC,SACxB,CACA,qBAAM,MAAO,CACX,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,SACT\"}"
};

const Button = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { count = 0 } = $$props;

	if ($$props.count === void 0 && $$bindings.count && count !== void 0) $$bindings.count(count);
	$$result.css.add(css$1);
	return `<button class="svelte-1g2i04o">Clicked ${escape(count)} ${escape(count === 1 ? 'time' : 'times')} </button>`;
});

/* tests/increment.template.svelte generated by Svelte v4.1.1 */

const css = {
	code: "button.svelte-mtv6m{background:dodgerblue;border:1px solid blue;font-family:cursive, system-ui}button.svelte-mtv6m:hover{background:blue;color:dodgerblue}",
	map: "{\"version\":3,\"file\":\"increment.template.svelte\",\"sources\":[\"increment.template.svelte\"],\"sourcesContent\":[\"<script>\\n  import Button from \\\"./increment/Button.svelte\\\"\\n\\tlet count = 0;\\n\\n\\tfunction handleClick() {\\n\\t\\tcount += 1;\\n\\t}\\n</script>\\n\\n\\n<p>\\n  <button on:click={handleClick} data-hx-get=\\\"/het\\\">\\n    Clicked {count}\\n    {count === 1 ? 'time' : 'times'}\\n  </button>\\n  <Button count={1}/>\\n</p>\\n\\n<style>\\n  button {\\n    background: dodgerblue;\\n    border: 1px solid blue;\\n    font-family: cursive, system-ui;\\n  }\\n  button:hover {\\n    background: blue;\\n    color: dodgerblue;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAmBE,mBAAO,CACL,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,WAAW,CAAE,OAAO,CAAC,CAAC,SACxB,CACA,mBAAM,MAAO,CACX,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,UACT\"}"
};

const Increment_template = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let count = 0;

	$$result.css.add(css);
	return `<p><button data-hx-get="/het" class="svelte-mtv6m">Clicked ${escape(count)} ${escape('times')}</button> ${validate_component(Button, "Button").$$render($$result, { count: 1 }, {}, {})} </p>`;
});

module.exports = Increment_template;
