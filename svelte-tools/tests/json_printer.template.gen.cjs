'use strict';

/** @returns {void} */

function run(fn) {
	return fn();
}

function blank_object() {
	return Object.create(null);
}

/**
 * @param {Function[]} fns
 * @returns {void}
 */
function run_all(fns) {
	fns.forEach(run);
}

let current_component;

/** @returns {void} */
function set_current_component(component) {
	current_component = component;
}

const ATTR_REGEX = /[&"]/g;
const CONTENT_REGEX = /[&<]/g;

/**
 * Note: this method is performance sensitive and has been optimized
 * https://github.com/sveltejs/svelte/pull/5701
 * @param {unknown} value
 * @returns {string}
 */
function escape(value, is_attr = false) {
	const str = String(value);
	const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
	pattern.lastIndex = 0;
	let escaped = '';
	let last = 0;
	while (pattern.test(str)) {
		const i = pattern.lastIndex - 1;
		const ch = str[i];
		escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : ch === '"' ? '&quot;' : '&lt;');
		last = i + 1;
	}
	return escaped + str.substring(last);
}

let on_destroy;

/** @returns {{ render: (props?: {}, { $$slots, context }?: { $$slots?: {}; context?: Map<any, any>; }) => { html: any; css: { code: string; map: any; }; head: string; }; $$render: (result: any, props: any, bindings: any, slots: any, context: any) => any; }} */
function create_ssr_component(fn) {
	function $$render(result, props, bindings, slots, context) {
		const parent_component = current_component;
		const $$ = {
			on_destroy,
			context: new Map(context || (parent_component ? parent_component.$$.context : [])),
			// these will be immediately discarded
			on_mount: [],
			before_update: [],
			after_update: [],
			callbacks: blank_object()
		};
		set_current_component({ $$ });
		const html = fn(result, props, bindings, slots);
		set_current_component(parent_component);
		return html;
	}
	return {
		render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
			on_destroy = [];
			const result = { title: '', head: '', css: new Set() };
			const html = $$render(result, props, {}, $$slots, context);
			run_all(on_destroy);
			return {
				html,
				css: {
					code: Array.from(result.css)
						.map((css) => css.code)
						.join('\n'),
					map: null // TODO
				},
				head: result.title + result.head
			};
		},
		$$render
	};
}

function tightJsonStringify(obj, replacer) {
  return JSON.stringify(obj, replacer, 2).replace(/^([\{\[])\n (\s+)/, "$1$2").replace(/(\n[ ]+[\{\[])\n\s+/g, "$1 ").replace(/\n\s*([\]\}])/g, " $1");
}

function devStringify(input, display = true) {
  try {
    if (typeof input === "string") {
      if (input[0] === "{" || input[0] === "[") {
        try {
          return devStringify(JSON.parse(input), display);
        } catch {
        }
      }
      return input;
    } else if (typeof input === "function") {
      return input.toString();
    } else {
      const replacer = (_key, value) => {
        try {
          if (value && value.toJSON === void 0) {
            if (value instanceof Error) {
              return {
                error: value.toString(),
                stack: value.stack ?? null,
                // @ts-ignore
                cause: value.cause ? replacer("cause", value.cause) : void 0
              };
            }
          }
        } catch {
        }
        return value;
      };
      const json = tightJsonStringify(input, replacer);
      return display ? cleanNewlinesAndStacks(json.replace(/(\\?")([^"]+)\1:/g, "$2:")) : json;
    }
  } catch (err) {
    return input?.name || String(input);
  }
}
function cleanNewlinesAndStacks(stack) {
  return stack.replace(/(\(|\sat )\/[^\)\s]+node_modules\//gm, "$1node_modules/").replace(/([^"]+?)"((?:\\.|[^\"])*)"/g, (_fullMatch, beforeQuote, inside) => {
    return beforeQuote + (inside ? `"${inside.split(/\\n/g).join("\n" + " ".repeat(beforeQuote.length))}"` : '""');
  });
}

/* tests/json_printer.template.svelte generated by Svelte v4.1.1 */

const css = {
	code: "pre.svelte-yodwb1{background:whitesmoke;padding:20px}",
	map: "{\"version\":3,\"file\":\"json_printer.template.svelte\",\"sources\":[\"json_printer.template.svelte\"],\"sourcesContent\":[\"<script>\\n  import { devStringify } from \\\"./devstringify.ts\\\";\\n\\n  export let value = {\\n    a: 1,\\n    b: {\\n      c: [],\\n    },\\n  };\\n</script>\\n\\n<pre>{devStringify(value)}</pre>\\n\\n<style>\\n  pre {\\n    background: whitesmoke;\\n    padding: 20px;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAcE,iBAAI,CACF,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,IACX\"}"
};

const Json_printer_template = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { value = { a: 1, b: { c: [] } } } = $$props;
	if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
	$$result.css.add(css);
	return `<pre class="svelte-yodwb1">${escape(devStringify(value))}</pre>`;
});

module.exports = Json_printer_template;
