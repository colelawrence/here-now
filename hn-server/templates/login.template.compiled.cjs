'use strict';

/** @returns {void} */

function run(fn) {
	return fn();
}

function blank_object() {
	return Object.create(null);
}

/**
 * @param {Function[]} fns
 * @returns {void}
 */
function run_all(fns) {
	fns.forEach(run);
}

let current_component;

/** @returns {void} */
function set_current_component(component) {
	current_component = component;
}

// general each functions:

function ensure_array_like(array_like_or_iterator) {
	return array_like_or_iterator?.length !== undefined
		? array_like_or_iterator
		: Array.from(array_like_or_iterator);
}

const ATTR_REGEX = /[&"]/g;
const CONTENT_REGEX = /[&<]/g;

/**
 * Note: this method is performance sensitive and has been optimized
 * https://github.com/sveltejs/svelte/pull/5701
 * @param {unknown} value
 * @returns {string}
 */
function escape(value, is_attr = false) {
	const str = String(value);
	const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;
	pattern.lastIndex = 0;
	let escaped = '';
	let last = 0;
	while (pattern.test(str)) {
		const i = pattern.lastIndex - 1;
		const ch = str[i];
		escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : ch === '"' ? '&quot;' : '&lt;');
		last = i + 1;
	}
	return escaped + str.substring(last);
}

/** @returns {string} */
function each(items, fn) {
	items = ensure_array_like(items);
	let str = '';
	for (let i = 0; i < items.length; i += 1) {
		str += fn(items[i], i);
	}
	return str;
}

let on_destroy;

/** @returns {{ render: (props?: {}, { $$slots, context }?: { $$slots?: {}; context?: Map<any, any>; }) => { html: any; css: { code: string; map: any; }; head: string; }; $$render: (result: any, props: any, bindings: any, slots: any, context: any) => any; }} */
function create_ssr_component(fn) {
	function $$render(result, props, bindings, slots, context) {
		const parent_component = current_component;
		const $$ = {
			on_destroy,
			context: new Map(context || (parent_component ? parent_component.$$.context : [])),
			// these will be immediately discarded
			on_mount: [],
			before_update: [],
			after_update: [],
			callbacks: blank_object()
		};
		set_current_component({ $$ });
		const html = fn(result, props, bindings, slots);
		set_current_component(parent_component);
		return html;
	}
	return {
		render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
			on_destroy = [];
			const result = { title: '', head: '', css: new Set() };
			const html = $$render(result, props, {}, $$slots, context);
			run_all(on_destroy);
			return {
				html,
				css: {
					code: Array.from(result.css)
						.map((css) => css.code)
						.join('\n'),
					map: null // TODO
				},
				head: result.title + result.head
			};
		},
		$$render
	};
}

/** @returns {string} */
function add_attribute(name, value, boolean) {
	if (value == null || (boolean && !value)) return '';
	const assignment = boolean && value === true ? '' : `="${escape(value, true)}"`;
	return ` ${name}${assignment}`;
}

/* hn-server/templates/login.template.svelte generated by Svelte v4.1.1 */

const css = {
	code: ":root{font-family:system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell,\n      \"Open Sans\", \"Helvetica Neue\", sans-serif;max-width:480px;margin:2rem auto}.login-btn.svelte-ull3w5{text-decoration:none;display:block;padding:16px 12px}.login-btn.svelte-ull3w5:hover{background:rgba(128, 128, 138, 0.1)}h1.svelte-ull3w5{position:relative}.wave.svelte-ull3w5{position:absolute;right:100%}",
	map: "{\"version\":3,\"file\":\"login.template.svelte\",\"sources\":[\"login.template.svelte\"],\"sourcesContent\":[\"<script>\\n  export const loginURLs = [\\n    { label: \\\"Discord\\\", url: \\\"login-discord\\\" },\\n    { label: \\\"Slack\\\", url: \\\"login-slack\\\" },\\n    { label: \\\"Google Workspace\\\", url: \\\"login-google-workspace\\\" },\\n  ];\\n</script>\\n\\n<h1><span class=\\\"wave\\\">ðŸ‘‹</span>&nbsp;Here Now</h1>\\n{#each loginURLs as { label, url }}\\n  <a href={url} class=\\\"login-btn\\\">Continue with {label}</a>\\n{/each}\\n\\n<style>\\n  :root {\\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, Oxygen, Ubuntu, Cantarell,\\n      \\\"Open Sans\\\", \\\"Helvetica Neue\\\", sans-serif;\\n    max-width: 480px;\\n    margin: 2rem auto;\\n  }\\n  .login-btn {\\n    text-decoration: none;\\n    display: block;\\n    padding: 16px 12px;\\n  }\\n  .login-btn:hover {\\n    background: rgba(128, 128, 138, 0.1);\\n  }\\n  h1 {\\n    position: relative;\\n  }\\n  .wave {\\n    position: absolute;\\n    right: 100%;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAcE,KAAM,CACJ,WAAW,CAAE,SAAS,CAAC,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC;AAC7G,MAAM,WAAW,CAAC,CAAC,gBAAgB,CAAC,CAAC,UAAU,CAC3C,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CAAC,IACf,CACA,wBAAW,CACT,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,KAAK,CACd,OAAO,CAAE,IAAI,CAAC,IAChB,CACA,wBAAU,MAAO,CACf,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CACrC,CACA,gBAAG,CACD,QAAQ,CAAE,QACZ,CACA,mBAAM,CACJ,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IACT\"}"
};

const Login_template = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	const loginURLs = [
		{ label: "Discord", url: "login-discord" },
		{ label: "Slack", url: "login-slack" },
		{
			label: "Google Workspace",
			url: "login-google-workspace"
		}
	];

	if ($$props.loginURLs === void 0 && $$bindings.loginURLs && loginURLs !== void 0) $$bindings.loginURLs(loginURLs);
	$$result.css.add(css);

	return `<h1 class="svelte-ull3w5"><span class="wave svelte-ull3w5">ðŸ‘‹</span>Â Here Now</h1> ${each(loginURLs, ({ label, url }) => {
		return `<a${add_attribute("href", url, 0)} class="login-btn svelte-ull3w5">Continue with ${escape(label)}</a>`;
	})}`;
});

module.exports = Login_template;
