import { Theme } from "./theme.slint";

export component HnTextHeading inherits Text {
    in property <float> resize: 1;
    font-size: Theme.text-ui-heading-size * root.resize;
    font-family: Theme.text-ui-heading-family;
    font-weight: Theme.text-ui-heading-weight;
    color: Theme.text-body;
}
export component HnText inherits Text {
    font-size: Theme.text-content-size;
    font-family: Theme.text-content-family;
    font-weight: Theme.text-content-weight;
    color: Theme.text-body;
}

export component HnButton inherits TouchArea {
    in property <string> text: "Label";
    in property <bool> primary: false;
    Rectangle {
        border-color: transparent;
        border-width: 3px;
        background: root.primary ? root.has-hover ? Theme.in-call-color : Theme.in-call-color.brighter(1) : transparent;
        animate background {
            duration: 0.2s;
            easing: ease-in-out;
        }
    }
    VerticalLayout {
        padding-left: 4px;
        padding-right: 4px;
        min-width: text.width + 8px;
        alignment: center;
        text := Text {
            font-size: Theme.text-ui-button-size;
            font-family: Theme.text-ui-button-family;
            font-weight: Theme.text-ui-button-weight;
            color: root.primary ? white : root.has-hover ? Theme.text-body : Theme.text-body.brighter(5);
            text: root.text;
            animate color {
                duration: 0.2s;
                easing: ease-in-out;
            }
        }
    }
}

export component HnTextInput inherits TouchArea {
    in property <string> label: "Label";
    in property <string> placeholder: "";
    in property <[string]> examples: [];
    in property <string> original_value: "";
    in-out property <string> value <=> input.text;
    vertical-stretch: 0;

    clicked => {
        input.focus();
    }

    VerticalLayout {
        spacing: 4px;
        HorizontalLayout {
            alignment: start;
            spacing: 4px;
            Text {
                vertical-stretch: 0;
                font-size: Theme.text-ui-label-size;
                font-family: Theme.text-ui-label-family;
                font-weight: Theme.text-ui-label-weight;
                color: Theme.text-body;
                text: root.label;
            }
            if root.original_value != root.value: HnButton {
                vertical-stretch: 0;
                text: "Reset";
                clicked => {
                    root.value = root.original_value;
                }
            }
        }
        field := Rectangle {
            padding: 4px;
            min-height: Theme.text-ui-input-size + field.padding * 2;
            border-width: 1px;
            border-color: input.has-focus ? Theme.text-ui-input-active-border : Theme.text-ui-input-inactive-border;
            border-radius: 3px;
            vertical-stretch: 0;
            input := TextInput {
                y: field.padding;
                x: field.padding;
                font-size: Theme.text-ui-input-size;
                font-family: Theme.text-ui-input-family;
                font-weight: Theme.text-ui-input-weight + (root.original_value != root.value ? 100 : 0);
                color: root.original_value != root.value ? Theme.text-body : Theme.text-body.brighter(2);
            }
        }
        if examples.length > 0: HorizontalLayout {
            alignment: start;
            spacing: 4px;
            HnText {
                text: "For example ";
            }
            for example in examples: HnButton {
                text: example;
                clicked => {
                    root.value = example;
                }
            }
        }
    }
}

export struct Notification {
    key: string,
    title: string,
    body: string,
}

export component HnModalHeading inherits HorizontalLayout {
    in property <string> title;
    VerticalLayout {
        alignment: center;
        Image {
            width: 32px;
            height: 32px;
            source: @image-url("./rubber_ducky_illustration.png");
        }
    }
    VerticalLayout {
        alignment: center;
        padding-top: 5px;
        HnTextHeading {
            text: root.title;
        }
    }
}

export component HnNotification inherits Rectangle {
    in property <Notification> notification;
    callback dismiss();
    // warning colors
    border-color: Theme.text-body;
    border-width: 1px;
    border-radius: 3px;

    HorizontalLayout {
        padding: 12px;
        VerticalLayout {
            horizontal-stretch: 1;
            Text {
                text: notification.title;
                color: Theme.text-body;
                font-family: Theme.text-ui-label-family;
                font-size: Theme.text-ui-label-size;
                font-weight: Theme.text-ui-label-weight;
            }
            Text {
                text: notification.body;
                color: Theme.text-body;
                font-family: Theme.text-content-family;
                font-size: Theme.text-content-size;
                font-weight: Theme.text-content-weight;
            }
        }
        VerticalLayout {
            horizontal-stretch: 0;
            alignment: start;
            HnButton {
                text: "Dismiss";
                clicked => {
                    root.dismiss();
                }
            }
        }
    }       
}
